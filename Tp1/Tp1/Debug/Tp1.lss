
Tp1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000853  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bf  00000000  00000000  00000af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003bb  00000000  00000000  000011b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001574  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d0  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018c  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 91 00 	call	0x122	; 0x122 <main>
  78:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z4Sec1v>:
#include <util/delay.h>	 // Retardos por software

/*Funciones de secuencias de leds*/
void Sec1(void)
{
	DDRD = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b10101010;
  84:	8a ea       	ldi	r24, 0xAA	; 170
  86:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	83 ec       	ldi	r24, 0xC3	; 195
  8c:	99 e0       	ldi	r25, 0x09	; 9
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <_Z4Sec1v+0xe>
  96:	00 c0       	rjmp	.+0      	; 0x98 <_Z4Sec1v+0x18>
  98:	00 00       	nop
	_delay_ms(200); // Delay de 100 ms
	PORTD = 0x00;
  9a:	1b b8       	out	0x0b, r1	; 11
	PORTD = 0b01010101;
  9c:	85 e5       	ldi	r24, 0x55	; 85
  9e:	8b b9       	out	0x0b, r24	; 11
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	83 ec       	ldi	r24, 0xC3	; 195
  a4:	99 e0       	ldi	r25, 0x09	; 9
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <_Z4Sec1v+0x26>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_Z4Sec1v+0x30>
  b0:	00 00       	nop
	_delay_ms(200); // Delay de 100 ms
	PORTD = 0x00;
  b2:	1b b8       	out	0x0b, r1	; 11
  b4:	08 95       	ret

000000b6 <_Z4Sec2v>:
}
void Sec2(void)
{
	DDRD=0xff;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x01;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	8b b9       	out	0x0b, r24	; 11
	int i = 0;
	for (i = 0; i < 8; i++)
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	28 30       	cpi	r18, 0x08	; 8
  c4:	31 05       	cpc	r19, r1
  c6:	7c f4       	brge	.+30     	; 0xe6 <_Z4Sec2v+0x30>
  c8:	4f ef       	ldi	r20, 0xFF	; 255
  ca:	81 ee       	ldi	r24, 0xE1	; 225
  cc:	94 e0       	ldi	r25, 0x04	; 4
  ce:	41 50       	subi	r20, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <_Z4Sec2v+0x18>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <_Z4Sec2v+0x22>
  d8:	00 00       	nop
	{
		_delay_ms(100); // Delay de 100 ms
		PORTD <<= 1;
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	88 0f       	add	r24, r24
  de:	8b b9       	out	0x0b, r24	; 11
void Sec2(void)
{
	DDRD=0xff;
	PORTD = 0x01;
	int i = 0;
	for (i = 0; i < 8; i++)
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	ee cf       	rjmp	.-36     	; 0xc2 <_Z4Sec2v+0xc>
  e6:	08 95       	ret

000000e8 <_Z4Sec3v>:
	}
}

void Sec3(void)
{
	DDRD=0xff;
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	8a b9       	out	0x0a, r24	; 10
	int i = 0;
	PORTD = 0x80;
  ec:	80 e8       	ldi	r24, 0x80	; 128
  ee:	8b b9       	out	0x0b, r24	; 11
	for (i = 0; i < 8; i++)
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	28 30       	cpi	r18, 0x08	; 8
  f6:	31 05       	cpc	r19, r1
  f8:	8c f4       	brge	.+34     	; 0x11c <_Z4Sec3v+0x34>
  fa:	4f ef       	ldi	r20, 0xFF	; 255
  fc:	81 ee       	ldi	r24, 0xE1	; 225
  fe:	94 e0       	ldi	r25, 0x04	; 4
 100:	41 50       	subi	r20, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <_Z4Sec3v+0x18>
 108:	00 c0       	rjmp	.+0      	; 0x10a <_Z4Sec3v+0x22>
 10a:	00 00       	nop
	{
		_delay_ms(100); // Delay de 100 ms
		PORTD >>= 1;
 10c:	8b b1       	in	r24, 0x0b	; 11
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	95 95       	asr	r25
 112:	87 95       	ror	r24
 114:	8b b9       	out	0x0b, r24	; 11
void Sec3(void)
{
	DDRD=0xff;
	int i = 0;
	PORTD = 0x80;
	for (i = 0; i < 8; i++)
 116:	2f 5f       	subi	r18, 0xFF	; 255
 118:	3f 4f       	sbci	r19, 0xFF	; 255
 11a:	ec cf       	rjmp	.-40     	; 0xf4 <_Z4Sec3v+0xc>
	{
		_delay_ms(100); // Delay de 100 ms
		PORTD >>= 1;
	}
	Sec2();
 11c:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z4Sec2v>
 120:	08 95       	ret

00000122 <main>:
{
	/* Setup */
	/* Loop */

	int cont=0;
	DDRC=0x00;
 122:	17 b8       	out	0x07, r1	; 7
	DDRB=0xff;
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	84 b9       	out	0x04, r24	; 4
	PORTC |= (1<<PORTC0) | (1<<PORTC1);
 128:	88 b1       	in	r24, 0x08	; 8
 12a:	83 60       	ori	r24, 0x03	; 3
 12c:	88 b9       	out	0x08, r24	; 8
int main(void)
{
	/* Setup */
	/* Loop */

	int cont=0;
 12e:	c0 e0       	ldi	r28, 0x00	; 0
 130:	d0 e0       	ldi	r29, 0x00	; 0
	DDRC=0x00;
	DDRB=0xff;
	PORTC |= (1<<PORTC0) | (1<<PORTC1);
	while (1)
	{
		if(((PINC & (1<<PINC0))==0)&& (cont<3)){
 132:	30 99       	sbic	0x06, 0	; 6
 134:	05 c0       	rjmp	.+10     	; 0x140 <main+0x1e>
 136:	c3 30       	cpi	r28, 0x03	; 3
 138:	d1 05       	cpc	r29, r1
 13a:	24 f0       	brlt	.+8      	; 0x144 <main+0x22>
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	03 c0       	rjmp	.+6      	; 0x146 <main+0x24>
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	01 c0       	rjmp	.+2      	; 0x146 <main+0x24>
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	88 23       	and	r24, r24
 148:	11 f0       	breq	.+4      	; 0x14e <main+0x2c>
			cont++;
 14a:	21 96       	adiw	r28, 0x01	; 1
 14c:	05 c0       	rjmp	.+10     	; 0x158 <main+0x36>
		}
		else if (cont>=3){
 14e:	c3 30       	cpi	r28, 0x03	; 3
 150:	d1 05       	cpc	r29, r1
 152:	14 f0       	brlt	.+4      	; 0x158 <main+0x36>
			cont=0;
 154:	c0 e0       	ldi	r28, 0x00	; 0
 156:	d0 e0       	ldi	r29, 0x00	; 0
			DDRB=0xff;
		}
		else{
			DDRB=0x00;
		}*/
		if ((PINC & (1<<PINC1))==0){
 158:	31 99       	sbic	0x06, 1	; 6
 15a:	11 c0       	rjmp	.+34     	; 0x17e <main+0x5c>
			switch(cont){
 15c:	c1 30       	cpi	r28, 0x01	; 1
 15e:	d1 05       	cpc	r29, r1
 160:	41 f0       	breq	.+16     	; 0x172 <main+0x50>
 162:	c2 30       	cpi	r28, 0x02	; 2
 164:	d1 05       	cpc	r29, r1
 166:	41 f0       	breq	.+16     	; 0x178 <main+0x56>
 168:	20 97       	sbiw	r28, 0x00	; 0
 16a:	51 f4       	brne	.+20     	; 0x180 <main+0x5e>
				case 0:
					PORTB=0b00001000;
 16c:	88 e0       	ldi	r24, 0x08	; 8
 16e:	85 b9       	out	0x05, r24	; 5
					break;
 170:	07 c0       	rjmp	.+14     	; 0x180 <main+0x5e>
				case 1:
					PORTB=0b00010000;
 172:	80 e1       	ldi	r24, 0x10	; 16
 174:	85 b9       	out	0x05, r24	; 5
					break;
 176:	04 c0       	rjmp	.+8      	; 0x180 <main+0x5e>
				case 2:
					PORTB=0b00011000;
 178:	88 e1       	ldi	r24, 0x18	; 24
 17a:	85 b9       	out	0x05, r24	; 5
					break;
 17c:	01 c0       	rjmp	.+2      	; 0x180 <main+0x5e>
			}
		}
		else
			PORTB=0x00;
 17e:	15 b8       	out	0x05, r1	; 5
		//_delay_ms(100);
		switch(cont){
 180:	c1 30       	cpi	r28, 0x01	; 1
 182:	d1 05       	cpc	r29, r1
 184:	41 f0       	breq	.+16     	; 0x196 <main+0x74>
 186:	c2 30       	cpi	r28, 0x02	; 2
 188:	d1 05       	cpc	r29, r1
 18a:	41 f0       	breq	.+16     	; 0x19c <main+0x7a>
 18c:	20 97       	sbiw	r28, 0x00	; 0
 18e:	89 f6       	brne	.-94     	; 0x132 <main+0x10>
			case 0:
				Sec1();
 190:	0e 94 40 00 	call	0x80	; 0x80 <_Z4Sec1v>
				break;
 194:	ce cf       	rjmp	.-100    	; 0x132 <main+0x10>
			case 1:
				Sec2();
 196:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z4Sec2v>
				break;
 19a:	cb cf       	rjmp	.-106    	; 0x132 <main+0x10>
			case 2:
				Sec3();
 19c:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z4Sec3v>
				break;
 1a0:	c8 cf       	rjmp	.-112    	; 0x132 <main+0x10>

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
